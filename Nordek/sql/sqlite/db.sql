CREATE TABLE IF NOT EXISTS `Artikkels` (
    ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE,
    Artikkel VARCHAR(2) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS `Difficulties`(
    ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE,
    Difficulty VARCHAR(20) NOT NULL UNIQUE,
    Value INTEGER NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS `Nouns` (
    ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE,
    ArtikkelID INTEGER NOT NULL,
    EntallU VARCHAR(50) NOT NULL,
    EntallB VARCHAR(50) NOT NULL,
    FlertallU VARCHAR(50) NOT NULL,
    FlertallB VARCHAR(50) NOT NULL,
    Active BOOLEAN NOT NULL DEFAULT FALSE,
    Regular BOOLEAN NOT NULL DEFAULT FALSE,
    FOREIGN KEY(ArtikkelID) REFERENCES Artikkels(ID)
);

CREATE TABLE IF NOT EXISTS `Languages` (
    ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE,
    Lang VARCHAR(30) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS `Translations` (
    ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE,
    LangID INTEGER NOT NULL,
    Translation VARCHAR(50) NOT NULL,
    FOREIGN KEY(LangID) REFERENCES Languages(ID)
);

CREATE TABLE IF NOT EXISTS `Nouns_Translations` (
    NounID INTEGER NOT NULL,
    TranslationID INTEGER NOT NULL,
    PRIMARY KEY(NounID, TranslationID),
    FOREIGN KEY(NounID) REFERENCES Nouns(ID),
    FOREIGN KEY (TranslationID) REFERENCES Translations(ID)
);


CREATE TABLE IF NOT EXISTS `Synonyms` (
    NounID_1 INTEGER NOT NULL,
    NounID_2 INTEGER NOT NULL,
    PRIMARY KEY(NounID_1, NounID_2),
    FOREIGN KEY(NounID_1) REFERENCES Nouns(ID),
    FOREIGN KEY(NounID_1) REFERENCES Nouns(ID)
);

CREATE TABLE IF NOT EXISTS `Users` (
    ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE,
    login VARCHAR(20) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS `Active_User` (
    ID INTEGER PRIMARY KEY NOT NULL UNIQUE,
    FOREIGN KEY(ID) REFERENCES Users(ID)
);

CREATE TABLE IF NOT EXISTS `Repetitions` (
    NounID INTEGER NOT NULL,
    UserID INTEGER NOT NULL,
    DifficultyID INTEGER NOT NULL,
    DateCreated DATE NOT NULL,
    LastUpdated DATE NOT NULL,
    Count INTEGER NOT NULL,
    PRIMARY KEY(NounID, UserID),
    FOREIGN KEY(NounID) REFERENCES Nouns(ID),
    FOREIGN KEY(UserID) REFERENCES Users(ID)
);